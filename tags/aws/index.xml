<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>aws on echen's blog</title><link>https://blog.echen.io/tags/aws/</link><description>Recent content in aws on echen's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 08 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.echen.io/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>My Journey with Amazon Web Services</title><link>https://blog.echen.io/p/my-journey-with-amazon-web-services/</link><pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.echen.io/p/my-journey-with-amazon-web-services/</guid><description>&lt;img src="https://blog.echen.io/p/my-journey-with-amazon-web-services/aws.jpeg" alt="Featured image of post My Journey with Amazon Web Services" />&lt;p>Around a year ago, I was bored out of my mind. School sluggishly churned along while I desperately searched for something to do. I stumbled across this YouTube video about creating a Twitter Bot, and I was intrigued. Having relearned some Python, I decided to implement my own.&lt;/p>
&lt;p>The process of creating one wasn&amp;rsquo;t difficult. I essentially just copied the code into my clipboard, created a developer account, and boom, bot completed. It was a rather simple bot&amp;ndash; it scanned tweets that mentioned my profile with a particular hashtag and responded with a corny message. I contemplated making it &amp;ldquo;naughty,&amp;rdquo; but I ultimately decided against it, since some of my teachers follow me (I know, so famous).&lt;/p>
&lt;p>Since the bot essentially just checks for new tweets every now and then, it requires a while loop to continuously poll new tweets with API calls. I wanted to keep it running indefinitely, but I surely wasn&amp;rsquo;t going to use my computer to do that. So I needed a solution that allowed me to run a script continuously. The first place I looked to was &lt;a class="link" href="https://www.pythonanywhere.com/" target="_blank" rel="noopener"
>pythonanywhere.com&lt;/a>, which allows you to run python scripts on their servers. The interface was easy to use, but the free tier servers clocked out too quickly, only allowing my script to run for maybe a couple minutes tops. I contemplated getting a server, but I was not familiar with how to obtain or use one, so that was out of the picture.&lt;/p>
&lt;p>I asked my dad, who directed me to Amazon Web Services (AWS), which is a cloud platform that allows you to do anything you imagine a tech company to do. Machine learning, web servers, AI, databases, you name it. He showed me how to use Lambda, a serverless-compute product, which allows users to run scripts in all sorts of programming languages (Java, Node.js, Python, etc.) without worrying about provisioning a server. How cool is that? I used an S3 bucket (storage service, like Google Drive) to track a file with the ID of the most recent tweet polled. Naively, I stored the credentials in my script that calls the S3 bucket on the behalf of a user in my AWS account with access to S3 (don&amp;rsquo;t do that). Lastly, my dad showed me that I could periodically trigger this Lambda function with a CloudWatch (monitoring service) event, which would invoke it every couple of minutes.&lt;/p>
&lt;p>It worked splendidly, and I was happy. &lt;em>So&amp;hellip;what does this have to do with the thing in the title?&lt;/em> Well, I was intrigued by AWS after the completion of this project, and I decided to learn some more. I borrowed my dad&amp;rsquo;s LinuxAcademy account (provided by his employer) to learn some AWS principles. After taking a rather simple and introductory course, I wanted to dive in deeper. I was amazed to learn that a company like Netflix could run all of its operations in the cloud. I eventually stumbled across the Solutions Architect Course, which I saw was like 60 hours long. But the challenge was alluring, and my most-of-the-time-super-lazy ass decided to take it head-on.&lt;/p>
&lt;p>Somehow, I completed the entire course within a month. I wanted to take the certification exam immediately, but I still was not completely comfortable with the services yet. I wanted to take a break, and I did not pick it back up until this summer. However, I did end up experimenting with AWS a bit. If you look at the DNS record for this site or any of my others, you can see that it&amp;rsquo;s hosted on Amazon/CloudFront. At least I put my knowledge to some use.&lt;/p>
&lt;p>So what now? Well, as I mentioned already, I picked it back up this summer. Since the course I took last year became legacy (there is an updated exam), I decided to take an updated course, with the same goal of taking the certification. I completed it about a week ago, and I feel a lot more confident than I did a year ago, and I&amp;rsquo;m looking to book a certification exam in the coming weeks. But why would a puny pre-freshman college student need something like this? That&amp;rsquo;s a good question&amp;hellip;I don&amp;rsquo;t know, either. Maybe it&amp;rsquo;ll help me get an internship next year, or maybe I&amp;rsquo;ll just end up wasting $150, who knows. Maybe I just want to feel pride over the effort I put into this.&lt;/p>
&lt;p>&lt;em>What did I gain reading this 900-word essay of Eric&amp;rsquo;s stream of consciousness?&lt;/em> Good question. I don&amp;rsquo;t want you to leave without getting something in return. After all, I am thankful you made it this far. Below, I&amp;rsquo;ve attached the virtual notebook (using OneNote) containing my AWS notes. This is a culmination of about 100+ hours of video-watching and AWS sandbox experimentation. If you think AWS is interesting, I advise you to read about it and see if it is something you would truly want to learn. I&amp;rsquo;ll attach some resources below.&lt;/p>
&lt;p>AWS is a fantastic service. Many start-up companies can develop apps and create their business without ever needing to worry about tricky computer hardware and renting out massive facilities. It&amp;rsquo;s an easy way to enter the tech world where you can focus on the stuff you&amp;rsquo;re motivated to make. Since I don&amp;rsquo;t want to sound like a salesman right now, alternatives to AWS like &lt;a class="link" href="https://cloud.google.com/" target="_blank" rel="noopener"
>Google&amp;rsquo;s Cloud Platform&lt;/a> or &lt;a class="link" href="https://azure.microsoft.com/en-us/" target="_blank" rel="noopener"
>Microsoft&amp;rsquo;s Azure&lt;/a> are probably just as amazing, and you should check them out too. They all have free trials, where you can experiment with a lot of really cool tech! Best way to learn is just to hop straight in.&lt;/p>
&lt;blockquote>
&lt;p>Update: I passed the certification! I am very happy and relieved that the hours I put in meant something. Now on to the next journey&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;h3 id="read-about-aws">Read about AWS&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://aws.amazon.com/" target="_blank" rel="noopener"
>https://aws.amazon.com/about&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.wikiwand.com/en/Amazon_Web_Services" target="_blank" rel="noopener"
>https://www.wikiwand.com/en/Amazon_Web_Services&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://aws.amazon.com/certification/" target="_blank" rel="noopener"
>https://aws.amazon.com/certification/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="extra-links">Extra Links&lt;/h3>
&lt;ul>
&lt;li>Twitter Bot Video: &lt;a class="link" href="https://www.youtube.com/watch?v=W0wWwglE1Vc" target="_blank" rel="noopener"
>https://www.youtube.com/watch?v=W0wWwglE1Vc&lt;/a>&lt;/li>
&lt;li>Python Servers: &lt;a class="link" href="https://www.pythonanywhere.com/" target="_blank" rel="noopener"
>pythonanywhere.com&lt;/a>&lt;/li>
&lt;li>Google Cloud Platform: &lt;a class="link" href="https://cloud.google.com/" target="_blank" rel="noopener"
>https://cloud.google.com/&lt;/a>&lt;/li>
&lt;li>Microsoft Azure: &lt;a class="link" href="https://azure.microsoft.com/en-us/" target="_blank" rel="noopener"
>https://azure.microsoft.com/en-us/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="beautiful-notes-3">Beautiful Notes &amp;lt;3:&lt;/h3>
&lt;p>Actually&amp;hellip;this was a lot of work. You have to show you want it ðŸ˜‰. Message me and you will get it.&lt;/p>
&lt;blockquote>
&lt;p>There is no knowledge that is not power&lt;/p>
&lt;p>&amp;ndash; &lt;cite>Ralph Waldo Emerson &lt;/cite>&lt;/p>
&lt;/blockquote></description></item><item><title>Learning Web Development with Django</title><link>https://blog.echen.io/p/learning-web-development-with-django/</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.echen.io/p/learning-web-development-with-django/</guid><description>&lt;img src="https://blog.echen.io/p/learning-web-development-with-django/django.jpeg" alt="Featured image of post Learning Web Development with Django" />&lt;p>I spent my last couple of months learning how to make websites with the Django framework. I have happened to pick up on a few things from working on it, and I want to give you a few resources on how to get started.&lt;/p>
&lt;p>This website (referring to my old site at &lt;a class="link" href="https://blog.echen.io" target="_blank" rel="noopener"
>blog.echen.io&lt;/a>) in particular was made using Django, a python web framework. It is not difficult to learn, and it helps if you are at least familiar with the class structure in python. It&amp;rsquo;s good for websites that require things like user log in, posting, and model-related work (versions of the same type of object). I wouldn&amp;rsquo;t recommend it for static websites or rather simple websites, as it might take more time than you want. If you look at any of my other websites, all of them are also written in Django, other than my homepage, which is a static site hosted on Amazon S3 and CloudFront. I&amp;rsquo;m familiar with Django, but not much else.&lt;/p>
&lt;h2 id="how-do-i-learn-django">How do I learn Django?&lt;/h2>
&lt;p>I learned Django by reading &lt;a class="link" href="https://djangoforbeginners.com/introduction/" target="_blank" rel="noopener"
>&amp;ldquo;Django for Beginners&amp;rdquo;&lt;/a> by Will Vincent. It&amp;rsquo;s really good and I highly recommend it. You should at least know python and a little bit of Linux shell scripting before you get started (and HTML and CSS, of course). Django itself uses python but you need a lot of commands to get stuff set up. After that, you&amp;rsquo;ll start to get a hang of Django development from reading the book.&lt;/p>
&lt;h3 id="is-it-useful">Is it useful?&lt;/h3>
&lt;p>Websites like BitBucket (Git Repository) use Django, and a lot of big companies use it too. Django developers are wanted by tech companies, and it&amp;rsquo;s a good framework to learn regardless. Other powerful frameworks include Express.js, which is based on Node.js, and Angular (Javascript branch). There are a lot, and Django is just one out of a whole collection. Another common python framework is Flask. Both are powerful, but Django has a little more customization and complexity.&lt;/p>
&lt;h2 id="what-do-i-do-after-i-make-a-project">What do I do after I make a project?&lt;/h2>
&lt;p>Will Vincent will tell you how to deploy Django projects to Heroku, an online service for deploying projects. It&amp;rsquo;s free for basic stuff, but it&amp;rsquo;s not a good long-term solution, mostly if you want your own domain. Learning how to deploy your Django projects will require you to grasp networking, like TCP/IP, working on a cloud server, and learning how to use reverse proxies and HTTP services like Gunicorn. A good tutorial is &lt;a class="link" href="https://www.google.com/search?q=nginx&amp;#43;gunicorn&amp;#43;django&amp;amp;oq=nginx&amp;#43;gunicorn&amp;#43;django&amp;amp;aqs=chrome..69i57j35i39j0l4j69i60j69i61.2694j0j1&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8" target="_blank" rel="noopener"
>here&lt;/a>. But don&amp;rsquo;t worry, this will come after you finish your projects. I recommend you use Amazon Web Services to deploy your projects, but that is quite complicated, to be frank. You can always search online for the easiest place to get a server for yourself.&lt;/p>
&lt;p>Will Vincent&amp;rsquo;s professional Django book will guide you through much more complex stuff, and there are still a lot of APIs (REST frameworks) that you can add to make your projects more complex. Both are a good read but finish the beginner book first. He never really goes into deployment, but you&amp;rsquo;ll know how to develop Django projects pretty extensively.&lt;/p>
&lt;p>A lot of your skills will come from messing up. I&amp;rsquo;ve spent days debugging issues. I have searched up thousands of questions on Google, but that is all part of the learning process. It will be frustrating, but it will be worth it.&lt;/p>
&lt;h2 id="static-hosting-recommendations">Static Hosting Recommendations&lt;/h2>
&lt;p>You do not need a server or Django if you want a static website. I recommend Jekyll and GitHub Pages. The files sync with your GitHub repository, and the process is simple and streamlined. Furthermore, you don&amp;rsquo;t need to manage a server or anything fancy. You can also try Amazon S3, but that is less friendly to beginners.&lt;/p>
&lt;p>Django is a very powerful framework, and you can make almost anything you want. If you&amp;rsquo;re questioning whether it&amp;rsquo;s right for you, I urge you to give it a try. You can then decide what you really want to use. If you don&amp;rsquo;t want to streamline the project bottom up, you can use services like Wix or Squarespace, or WordPress. Those services let you do things like drag and drop, and you don&amp;rsquo;t even need coding to create a very stylish website. They aren&amp;rsquo;t cheap though; you should check your budget to make sure it&amp;rsquo;s the right choice for you. But, it might be worth it, since it makes building the website much faster and easier.&lt;/p></description></item></channel></rss>